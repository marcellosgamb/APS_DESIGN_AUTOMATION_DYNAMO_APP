üîÑ COMPLETE FLOW - Create/Update AppBundle Button

üéØ Step 1: Button in HTML
<button id="btnAppBundle" class="btn btn-secondary w-100">Create/Update AppBundle</button>
This creates a gray button labeled "Create/Update AppBundle" on the webpage.

‚ö†Ô∏è Step 2: JavaScript Event Handler
btnAppBundle.addEventListener('click', (e) => {
    if (!dynamoRevitDAFileInput.files[0]) {
        return logMessage('Please select an AppBundle ZIP file first (step 4).');
    }
    uploadAppBundle(e.currentTarget);
});
When someone presses the button, this code first checks if a ZIP file has been selected. If not, it shows an error message. If a file is selected, it calls uploadAppBundle.

üßπ Step 3: Clear Log & Disable Buttons & Start Upload
async function uploadAppBundle(clickedButton) {
    clearLogAndDisableButtons('Creating AppBundle...', clickedButton);
    try {
        const formData = new FormData();
        formData.append('appBundleFile', dynamoRevitDAFileInput.files[0]);
        formData.append('socketId', socketId);
        
        const response = await fetch('/api/aps/appbundle', {
            method: 'POST',
            body: formData
        });
This function clears the output, disables buttons, creates form data with the selected ZIP file, and sends it to the server.

üì° Step 4: Send File to Server
The browser creates a FormData object containing the uploaded ZIP file and sends it via POST to "/api/aps/appbundle".

üñ•Ô∏è Step 5: Server Creates AppBundle
router.post('/', upload.single('appBundleFile'), async (req, res) => {
    const { socketId } = req.body;
    const io = req.app.get('io');
    try {
        const headers = await getHeaders();
        const qualifiedAppBundleId = `${DA_CONFIG.NICKNAME}.${DA_CONFIG.APP_BUNDLE_NAME}`;
        
        io.to(socketId).emit('status', { message: '--- Step: CREATE APPBUNDLE ---' });
        io.to(socketId).emit('status', { message: `Creating AppBundle: ${qualifiedAppBundleId}` });
The server receives the file upload, gets authentication, and creates a qualified AppBundle ID using your nickname and app bundle name.

üîß Step 6: AppBundle Definition
        const appBundleData = {
            id: DA_CONFIG.APP_BUNDLE_NAME,
            engine: DA_CONFIG.ENGINE,
            description: `AppBundle for Dynamo Revit, version ${new Date().toISOString()}`
        };
        
        const newAppBundle = await axios.post(`${DA_BASE_URL}/appbundles`, appBundleData, { headers });
The server creates an AppBundle definition with your configured name, engine (Autodesk.Revit+2026), and description, then sends it to Autodesk's API.

üì¶ Step 7: Upload ZIP File Content
        const formData = new FormData();
        for (const key in newAppBundle.data.uploadParameters.formData) {
            formData.append(key, newAppBundle.data.uploadParameters.formData[key]);
        }
        formData.append('file', fs.createReadStream(bundlePath));
        
        await axios.post(newAppBundle.data.uploadParameters.endpointURL, formData, { 
            headers: formData.getHeaders() 
        });
The server takes your uploaded ZIP file and uploads it to Autodesk's cloud storage using special upload parameters provided by the AppBundle creation response.

üè∑Ô∏è Step 8: Create/Update Alias
        try {
            const aliasResponse = await axios.post(
                `${DA_BASE_URL}/appbundles/${DA_CONFIG.APP_BUNDLE_NAME}/aliases`,
                { id: DA_CONFIG.ACTIVITY_ALIAS, version: newAppBundle.data.version },
                { headers }
            );
        } catch (aliasErr) {
            if (aliasErr.response && aliasErr.response.status === 409) {
                await axios.patch(
                    `${DA_BASE_URL}/appbundles/${DA_CONFIG.APP_BUNDLE_NAME}/aliases/${DA_CONFIG.ACTIVITY_ALIAS}`,
                    { version: newAppBundle.data.version },
                    { headers }
                );
The server creates an alias (like a nickname) for the AppBundle version. If the alias already exists, it updates it to point to the new version.

üì± Step 9: Show Results & Re-enable Buttons
        res.status(200).json({ 
            message: 'AppBundle created successfully',
            version: newAppBundle.data.version,
            alias: DA_CONFIG.ACTIVITY_ALIAS
        });
    } finally {
        if (req.file && req.file.path) {
            try { await fs.remove(req.file.path); } catch (e) {}
        }
    }
The server sends back success information and cleans up the temporary uploaded file.

üéØ What This Accomplishes:
- Uploads your DynamoRevitDA.zip file to Autodesk's cloud
- Creates an AppBundle resource in Design Automation
- Sets up versioning and aliasing for the AppBundle
- Makes the Dynamo engine available for Activities to use

üìã Summary for Non-Coders:
1. User selects DynamoRevitDA.zip file and presses "Create/Update AppBundle"
2. Browser checks if file is selected, shows error if not
3. All buttons become gray and output log clears
4. Browser uploads the ZIP file to the server
5. Server creates AppBundle definition with your nickname and settings
6. Server uploads ZIP file content to Autodesk's cloud storage
7. Server creates/updates an alias to reference this version
8. Server sends success response and cleans up temporary files
9. Browser shows response and makes buttons clickable again

An AppBundle is like packaging your custom software (the Dynamo engine) so it can run in Autodesk's cloud. The ZIP file contains all the code needed to execute Dynamo scripts on Revit files in Design Automation. 