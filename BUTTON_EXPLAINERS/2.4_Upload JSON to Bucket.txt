🔄 COMPLETE FLOW - Upload JSON to Bucket Button

🎯 Step 1: Button in HTML
<button type="button" class="btn btn-info btn-sm" id="btnUploadJson" disabled>Upload JSON to Bucket</button>
This creates a blue button labeled "Upload JSON to Bucket" on the webpage. It starts disabled until JSON content is available.

⚠️ Step 2: JavaScript Event Handler
btnUploadJson.addEventListener('click', (e) => {
    if (!jsonContentTextarea.value.trim()) {
        return logMessage('No JSON content to upload. Please convert a Dynamo file first.');
    }
    uploadJsonContent(e.currentTarget);
});
When someone presses the button, this code checks if there's JSON content in the text area. If not, it shows an error message. If there is content, it calls uploadJsonContent.

🧹 Step 3: Clear Log & Disable Buttons & Start Upload
async function uploadJsonContent(clickedButton) {
    clearLogAndDisableButtons('Uploading JSON content...', clickedButton);
    try {
        const jsonContent = jsonContentTextarea.value.trim();
        
        const response = await fetch('/api/aps/upload/json-content', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                jsonContent: jsonContent,
                socketId: socketId 
            })
        });
This function clears the output, disables buttons, gets the JSON content from the text area, and sends it to the server as a JSON payload.

📡 Step 4: Send JSON Content to Server
The browser sends a POST request to "/api/aps/upload/json-content" with the JSON content and socket ID.

🖥️ Step 5: Server Processes Upload
router.post('/json-content', async (req, res) => {
    const { socketId, jsonContent } = req.body;
    const io = req.app.get('io');
    
    if (!jsonContent) {
        return res.status(400).json({ error: 'No JSON content provided' });
    }

    try {
        const headers = await getHeaders();
        
        io.to(socketId).emit('status', { message: '--- Step: UPLOAD JSON CONTENT ---' });
        io.to(socketId).emit('status', { message: 'Uploading run.json to bucket...' });
The server validates that JSON content was provided, gets authentication headers, and sends status updates.

🔧 Step 6: Upload Using Signed URL
        await uploadJsonWithSignedUrl(
            headers,
            DA_CONFIG.BUCKET_NAME,
            'run.json',
            jsonContent,
            io,
            socketId
        );
The server calls a helper function to upload the JSON content as "run.json" to your OSS bucket using Autodesk's signed URL method.

📦 Step 7: Signed URL Upload Process
async function uploadJsonWithSignedUrl(headers, bucketName, objectName, jsonContent, io, socketId) {
    const signedUrlResponse = await axios.get(
        `https://developer.api.autodesk.com/oss/v2/buckets/${bucketName}/objects/${objectName}/signeds3upload`,
        { headers }
    );
    
    const uploadData = signedUrlResponse.data;
    
    await axios.put(uploadData.urls[0], jsonContent, {
        headers: {
            'Content-Type': 'application/json'
        }
    });
    
    await axios.post(
        `https://developer.api.autodesk.com/oss/v2/buckets/${bucketName}/objects/${objectName}/signeds3upload`,
        { uploadKey: uploadData.uploadKey },
        { headers }
    );
This function gets a signed upload URL from Autodesk, uploads the JSON content directly to cloud storage, then completes the upload process.

📱 Step 8: Mark Upload Complete & Enable Workitem
        res.status(200).json({ 
            message: 'JSON content uploaded successfully as run.json',
            fileName: 'run.json'
        });
            
            uploadedFiles.json = true;
            updateWorkitemButtonState();
        } finally {
            enableAllButtons(false);
        }
The server sends success response, the browser marks JSON as uploaded, checks if the "Run Workitem" button should be enabled, and makes all buttons clickable again.

🎯 Step 9: Update Workitem Button State
function updateWorkitemButtonState() {
    btnWorkitem.disabled = !(uploadedFiles.rvt && uploadedFiles.json);
}
This function enables the "Run Workitem" button only if both a Revit file and JSON file have been uploaded.

🎯 What This Accomplishes:
- Uploads the converted JSON content to your OSS bucket as "run.json"
- Uses secure signed URL method for uploading
- Marks JSON file as uploaded in the app's tracking
- Potentially enables the "Run Workitem" button if RVT is also uploaded
- Required for Design Automation to execute your Dynamo script

📋 Summary for Non-Coders:
1. User presses "Upload JSON to Bucket" button (enabled after converting Dynamo file)
2. Browser checks if JSON content exists in text area
3. All buttons become gray and output log clears
4. Browser sends JSON content to server
5. Server gets signed upload URL from Autodesk cloud storage
6. Server uploads JSON content directly to your OSS bucket as "run.json"
7. Server completes the upload process with Autodesk
8. Browser marks JSON as uploaded and may enable "Run Workitem" button
9. All buttons become clickable again

This step takes the converted JSON content and uploads it to your cloud storage bucket where Design Automation can find it. The file is saved as "run.json" which is the exact name that your Activity expects to find when it runs. 