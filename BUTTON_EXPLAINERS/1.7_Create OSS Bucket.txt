🔄 COMPLETE FLOW - Create OSS Bucket Button

🎯 Step 1: Button in HTML
<button id="btnCreateBucket" class="btn btn-secondary w-100">Create OSS Bucket</button>
This creates a gray button labeled "Create OSS Bucket" on the webpage.

⚠️ Step 2: JavaScript Event Handler
btnCreateBucket.addEventListener('click', (e) => postData('/api/aps/bucket', {}, 'Creating OSS Bucket...', e.currentTarget));
When someone presses the button, this code calls postData to send a request to the server.

🧹 Step 3: Clear Log & Disable Buttons
function clearLogAndDisableButtons(log, clickedButton) {
    clearLog();
    if (log) logMessage(log);
    allButtons.forEach(btn => {
        btn.disabled = true;
    });
}
This function clears the output window, shows "Creating OSS Bucket...", and makes all buttons gray/unclickable.

📡 Step 4: Send Request to Server
async function postData(url, body, log, clickedButton) {
    clearLogAndDisableButtons(log, clickedButton);
    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ ...body, socketId })
        });
The browser sends a POST request to "/api/aps/bucket" with the socket ID.

🖥️ Step 5: Server Checks If Bucket Exists
router.post('/', async (req, res) => {
    const { socketId } = req.body;
    const io = req.app.get('io');
    try {
        const headers = await getHeaders();
        io.to(socketId).emit('status', { message: '--- Step: CREATE BUCKET ---' });
        io.to(socketId).emit('status', { message: `Checking if bucket '${DA_CONFIG.BUCKET_NAME}' exists...` });
        
        try {
            const existingBucket = await axios.get(`https://developer.api.autodesk.com/oss/v2/buckets/${DA_CONFIG.BUCKET_NAME}/details`, { headers });
            io.to(socketId).emit('status', { message: `Bucket '${DA_CONFIG.BUCKET_NAME}' already exists.` });
            res.status(200).json({ 
                message: 'Bucket already exists',
                bucket: existingBucket.data
            });
            return;
The server first checks if a bucket with your configured name already exists. If it does, it returns the existing bucket information instead of creating a new one.

🔧 Step 6: Create New Bucket
        } catch (checkErr) {
            if (checkErr.response && checkErr.response.status === 404) {
                io.to(socketId).emit('status', { message: `Bucket not found, creating '${DA_CONFIG.BUCKET_NAME}'...` });
            } else {
                throw checkErr;
            }
        }
        
        const bucketData = {
            bucketKey: DA_CONFIG.BUCKET_NAME,
            policyKey: "transient"
        };
        
        const newBucket = await axios.post('https://developer.api.autodesk.com/oss/v2/buckets', bucketData, { headers });
If the bucket doesn't exist (404 error), the server creates a new bucket with your configured name and a "transient" policy (files are automatically deleted after a certain time).

📦 Step 7: Bucket Configuration
From config.js:
DA_CONFIG = {
    BUCKET_NAME: process.env.APS_BUCKET_NAME || 'my_test_bucketnew',
    BUCKET_REGION: process.env.APS_BUCKET_REGION || 'US',
}
The bucket name comes from your .env file or defaults to 'my_test_bucketnew'. The region is set to 'US' for optimal performance.

📱 Step 8: Show Results & Re-enable Buttons
        res.status(200).json({ 
            message: 'Bucket created successfully',
            bucket: newBucket.data
        });
    } catch (err) {
        const message = err.response ? JSON.stringify(err.response.data, null, 2) : err.message;
        io.to(socketId).emit('status', { message: `--- ERROR ---<br/>${message}` });
        res.status(err.response?.status || 500).json({
            error: 'Failed to create bucket.',
            details: err.response?.data || message
        });
    }
The server sends back success information with bucket details, or error information if something went wrong.

🎯 What This Accomplishes:
- Creates cloud storage bucket in Autodesk Object Storage Service (OSS)
- Provides a place to upload and store your project files
- Uses transient policy so files are automatically cleaned up
- Required before uploading any files for processing

📋 Summary for Non-Coders:
1. User presses "Create OSS Bucket" button
2. All buttons become gray and output log clears
3. Browser sends request to server
4. Server checks if bucket already exists with your configured name
5. If bucket exists, returns existing bucket info
6. If bucket doesn't exist, creates new bucket with transient policy
7. Server sends status updates during the process
8. Browser shows success/error response and makes buttons clickable again

An OSS Bucket is like creating a folder in cloud storage where you can upload and store files. The bucket is where all your project files (Revit models, Dynamo scripts, results) will be stored during the automation process. The "transient" policy means files are automatically deleted after some time to save storage costs. 