🔄 COMPLETE FLOW - Convert Dynamo File to JSON Button

🎯 Step 1: Button in HTML
<button type="button" class="btn btn-warning btn-sm" id="btnConvertDynToJson">Convert Dynamo File (Step 3) to JSON</button>
This creates a yellow button labeled "Convert Dynamo File (Step 3) to JSON" on the webpage.

⚠️ Step 2: JavaScript Event Handler
btnConvertDynToJson.addEventListener('click', (e) => {
    if (!dynFileInput.files[0]) {
        return logMessage('Please select a Dynamo file first.');
    }
    if (!socketId) {
        return logMessage('Not connected to server. Please refresh the page.');
    }
    convertDynamoToJson(e.currentTarget);
});
When someone presses the button, this code checks if a Dynamo file has been selected and if the connection to the server is active. If both are OK, it calls convertDynamoToJson.

🧹 Step 3: Clear Log & Disable Buttons & Start Conversion
async function convertDynamoToJson(clickedButton) {
    clearLogAndDisableButtons('Converting Dynamo to JSON...', clickedButton);
    try {
        const formData = new FormData();
        formData.append('dynFile', dynFileInput.files[0]);
        formData.append('socketId', socketId);
        formData.append('showContent', 'true');
        
        const response = await fetch('/api/aps/upload/dyn-to-json-preview', {
            method: 'POST',
            body: formData
        });
This function clears the output, disables buttons, creates form data with the selected Dynamo file, and sends it to the server for conversion.

📡 Step 4: Send File to Server
The browser creates a FormData object containing the uploaded .dyn file and sends it via POST to "/api/aps/upload/dyn-to-json-preview".

🖥️ Step 5: Server Validates File
router.post('/dyn-to-json-preview', upload.single('dynFile'), async (req, res) => {
    const { socketId } = req.body;
    const io = req.app.get('io');
    
    if (!req.file) {
        return res.status(400).json({ error: 'No Dynamo file uploaded' });
    }

    if (req.file.originalname !== DYN_FILE) {
        return res.status(400).json({ 
            error: `Dynamo file must be named "${DYN_FILE}". Please rename your file and upload again.` 
        });
    }
The server receives the file upload and validates that it exists and is named "run.dyn" as required by Design Automation.

🔧 Step 6: Read and Parse Dynamo File
        io.to(socketId).emit('status', { message: '--- Step: CONVERT DYNAMO TO JSON ---' });
        io.to(socketId).emit('status', { message: `Reading Dynamo file: ${req.file.originalname}` });
        
        const dynContent = await fs.readFile(req.file.path, 'utf8');
        
        let dynData;
        try {
            dynData = JSON.parse(dynContent);
        } catch (parseErr) {
            throw new Error('Invalid Dynamo file format. File must be valid JSON.');
        }
The server reads the uploaded .dyn file and parses it as JSON to ensure it's a valid Dynamo file format.

📦 Step 7: Create run.json Structure
        const runJson = {
            "target": {
                "type": "JsonGraphTarget",
                "contents": dynContent
            },
            "inputs": []
        };
        
        const jsonContent = JSON.stringify(runJson, null, 2);
The server wraps the Dynamo file content in the specific JSON structure that Design Automation expects for Dynamo Player execution.

📱 Step 8: Return JSON Content & Enable Upload
        res.status(200).json({ 
            message: 'Dynamo file converted to JSON successfully',
            originalFile: req.file.originalname,
            jsonContent: jsonContent
        });
    } finally {
        if (req.file && req.file.path) {
            try { await fs.remove(req.file.path); } catch (e) {}
        }
    }
The server sends back the converted JSON content and cleans up the temporary uploaded file.

🎯 Step 9: Display JSON & Enable Upload Button
            if (data.jsonContent) {
                jsonContentTextarea.value = data.jsonContent;
                btnUploadJson.disabled = false;
                logMessage('JSON content generated and displayed. You can now upload it.');
            }
        } finally {
            enableAllButtons(false);
        }
The browser receives the JSON content, displays it in the text area, enables the "Upload JSON" button, and makes all buttons clickable again.

🎯 What This Accomplishes:
- Converts .dyn file to the JSON format required by Design Automation
- Validates the Dynamo file format and naming
- Shows the converted JSON content for review
- Enables the next step (uploading the JSON)
- Does NOT upload anything yet - just converts and displays

📋 Summary for Non-Coders:
1. User selects a .dyn file and presses "Convert Dynamo File to JSON"
2. Browser checks if file is selected and connection is active
3. All buttons become gray and output log clears
4. Browser uploads the .dyn file to server for conversion
5. Server validates file exists and is named "run.dyn"
6. Server reads and parses the Dynamo file as JSON
7. Server wraps the content in Design Automation's required format
8. Server sends back the converted JSON content
9. Browser displays JSON in text area and enables "Upload JSON" button

This step converts your Dynamo script into the specific JSON format that Design Automation expects. It's like translating your Dynamo file into a language that the cloud automation system can understand. The converted JSON is displayed so you can review it before uploading. 